{"name":"GamonJS","tagline":"Simple Javascript Templating Engine","body":"# GamonJS\r\n\r\nGamonJS is another Javascript Template Engine\r\n\r\n## Usage\r\nfor demo you can check in the demo folder\r\n\r\n## Custom Scope Glue\r\nBy default gamon will use dot (.) as a scope glue\r\n```\r\n//custom scope glue\r\ngamon.scopeGlue(\"::\");\r\n```\r\n\r\n## Comments\r\nYou can add comments to your templates by wrapping the text in {{# #}}.\r\n```\r\n{{# this text will not gonna rendered #}}\r\n{{#\r\n    They can be multi-line too.\r\n#}}\r\n```\r\n\r\n## Prevent Parsing\r\nIf you would like to use a text contains gamon tag for example {{ your text }} inside your template, you can use gamon noparse tag. For example:\r\n```\r\n{{ noparse }}\r\n    {{ this text wont be parsed }}\r\n    {{ if array|length > 0 }}\r\n    {{ objects }}\r\n{{ /noparse }}\r\n```\r\n\r\n## Conditionals Tags\r\nConditionals in gamon are simple and easy to use. It allows for the standard if, elseif, and else.\r\n\r\nAll if blocks must be closed with either a {{ /if }} or {{ endif }} tag.\r\n\r\nA Conditional can contain any Comparison Operators you would do in JS (==, !=, ===, !==, >, <, <=, >=). You can also use any of the Logical Operators (||, &&, and, or).\r\n```\r\n{{ if object.properties }}\r\n    {{ properties }}\r\n{{ endif }}\r\n\r\n{{ if variable == \"some text\" }}\r\n    <p>Will render: {{ variable }}</p>\r\n{{ elseif variable == \"another text\" }}\r\n    <p>Will render another text {{ variable }}</p>\r\n{{ else }}\r\n    <p>Maybe this is not a text</p>\r\n{{ endif }}\r\n```\r\n\r\n##Variable Tags\r\nWhen dealing with variables, you can: access single variables, access deeply nested variables inside arrays/objects, and loop over an array. You can even loop over nested arrays.\r\n### Simple Variable\r\n```\r\nvar data = {\r\n    \"title\": \"Mr.\",\r\n    \"name\": {\r\n        \"first_name\": \"John\",\r\n        \"last_name\": \"Doe\"\r\n    },\r\n    \"childrens\": [\r\n        {\r\n            \"name\": \"Jhonny\",\r\n            \"age\": \"25\",\r\n            \"birthday\": \"1990-05-20\"\r\n        },\r\n        {\r\n            \"name\": \"Merry\",\r\n            \"age\": \"20\",\r\n            \"birthday\": \"1995-02-10\"\r\n        }\r\n    ],\r\n    \"asets\": [\"Cars\", \"House\", \"Bike\", \"Gold\"]\r\n};\r\n```\r\n### Basic Example\r\n```\r\nHello {{ title }}\r\nHello {{ title }} {{ name.first_name }}\r\n```\r\n\r\n### Variable Loop\r\nVarible Loop is a block tag contain variable name. Each loop variable tag must have its closing tag\r\n```\r\n//Loop an object\r\n{{ childrens }}\r\n    {{ name }}\r\n    {{ age }}\r\n    {{ birtday }}\r\n{{ /childrens }}\r\n\r\n//Loop an array\r\n{{ assets }}\r\n    {{ [] }}\r\n{{ /assets }}\r\n```\r\n\r\n## Parse\r\n\r\n### Simple Parse\r\n```\r\nvar obj = {\r\n    \"name\":{\r\n        \"first_name\": \"John\",\r\n        \"last_name\": \"Doe\"\r\n    }\r\n};\r\nvar text = '<p>First Name: {{ name.first_name }}, Last Name: {{ name.last_name }}</p>';\r\nvar html = gamon.parse(text, obj);\r\n```\r\n\r\n### Include Template\r\n```\r\n<script type=\"text/html\" id=\"my-tmpl\">\r\n    <p>First Name: {{ name.first_name }}, Last Name: {{ name.last_name }}</p>\r\n</script>\r\n<div id=\"container\"></div>\r\n\r\nvar obj = {\r\n    \"name\":{\r\n        \"first_name\": \"John\",\r\n        \"last_name\": \"Doe\"\r\n    }\r\n};\r\nvar tmpl = document.getElementById(\"my-tmpl\");\r\nvar container = document.getElementById(\"container\");\r\nvar html = gamon.parse(tmpl, obj);\r\ncontainer.innerHtml = html;\r\n```\r\n\r\n### External Template\r\nYou can load an external template using gamon loadTemplate method\r\n```\r\n//NON-AJAX\r\nvar html = gamon.loadTemplate(\"path/to/template\");\r\ngamon.parse(html);\r\n\r\n//AJAX\r\nvar html = gamon.loadTemplate({\r\n    url: \"partials/index.html\",\r\n    onComplete: function(response){\r\n        //do parsing here\r\n    }\r\n}, true);\r\n```\r\n\r\n## Filter\r\nGamon filter is a function that you can use to filter a variable/array/object in your variable tags and conditional tags separated by pipe (|) char. By default gamon provide filters: safe, index and length only but you can create your own custom filter\r\n\r\n* |safe ==> return escaped characters &, <, >, \", '\r\n* |index ==> return array index value, ex: array|index(keys,properties)\r\n* |length ==> return string, array, object length\r\n\r\n```\r\nvar obj = {\r\n    \"hello\": \"<script>alert('hello');</script>\",\r\n    \"skills\": [\"HTML\", \"Javascript\", \"CSS\"];\r\n};\r\n\r\n//safe\r\n{{ hello|safe }}\r\n\r\n//index\r\n{\r\n    \"skills\" : [\"HTML\", \"Javascript\", \"CSS\"],\r\n    \"childrens\": [\r\n        {\r\n            \"name\": \"John\"\r\n        },\r\n        {\r\n            \"name\": \"Doe\"\r\n        }\r\n    ]\r\n}\r\n{{ skills|index(0) }}\r\n{{ childrens|index(0, \"name\") }}\r\n\r\n// length\r\n{{ skills|length }}\r\n\r\n//conditional contain filter\r\n{{ if skills|length > 0 }}\r\n```\r\n\r\n### Custom Filter\r\nIf you need a custom callback that you can use in your filter, you can create your custom filter\r\n\r\n```\r\n//Register Single Filter\r\ngamon.filter.register(\"join\", function(separator, value){\r\n    if(!gamon.isArray(value)) throw new Error(\"Value not an array\");\r\n    return value.join(separator);\r\n});\r\n\r\n//Register multiple filters\r\ngamon.filter.register({\r\n    \"join\":function(separator, value){\r\n        if(!gamon.isArray(value)) throw new Error(\"Value not an array\");\r\n        return value.join(separator);\r\n    },\r\n    \"length\": function(value){\r\n        if(value === \"undefined\") return;\r\n        if(gamon.isObject(value)){\r\n            return Object.keys(value).length;\r\n        }else{\r\n            return value.length;\r\n        }\r\n    }\r\n});\r\n```\r\nYou can create your filter arguments as many as you want separated by \"\", but for the last argument should be the filter test value.\r\n```\r\ngamon.register(\"sample_filter\", function(arg1, arg2, arg3, arg4, value){\r\n    //logic here\r\n});\r\n\r\n//template usage\r\n{{ variable|sample_filter(\"arg1\",\"arg2\",\"arg3\",\"arg4\") }}\r\n```\r\n\r\nLicense\r\n----\r\nMIT - \r\nFree to use, Free to Edit, Do whatever you want with the code\r\n\r\nAuthor [Erwin yusrizal](http://erwinyusrizal.me)","google":"UA-62344789-1","note":"Don't delete this file! It's used internally to help with page regeneration."}